docker_build:
  image: docker:stable
  stage: build
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    changes:
      - Dockerfile
      - schedules

image: registry.gitlab.com/jinay1991/motion_planning

cppcheck:
  stage: build
  script:
    - cppcheck --template=gcc --enable=all --inconclusive --std=c++14 -I lib/include/ -I include/ lib/src/*.cpp src/*.cpp  > static_code_analysis.log
    - cppcheck --template=gcc --enable=all --inconclusive --std=c++14 -I lib/include/ -I include/ lib/src/*.cpp src/*.cpp --xml 2> static_code_analysis.xml
    - cppcheck-htmlreport --file=static_code_analysis.xml --report-dir=static_code_analysis_report --source-dir=.
  artifacts:
    name: static_code_analysis
    paths:
      - static_code_analysis_report/
      - static_code_analysis.xml
      - static_code_analysis.log
    expire_in: 7 days

bazel-build:
  stage: build
  script:
    - bazel build //... --host_force_python=PY2

bazel-test:
  stage: test
  dependencies:
    - bazel-build
  script:
    - bazel test //... --host_force_python=PY2 --test_output=all --cache_test_results=false --test_arg="--gtest_output=xml:/tmp/test_results.xml"
  after_script:
    - cp /tmp/test_results.xml test_results.xml
  artifacts:
    reports:
      junit: test_results.xml
    name: TestResults
    when: on_success

code-coverage:
  stage: test
  script:
    - bazel test --compilation_mode dbg //... --host_force_python=PY2 --test_output=all --cache_test_results=false --collect_code_coverage=true
    - export OUTPUT_DIR=$(bazel info execution_root)
    - export COVERAGE_INFO=$(find $OUTPUT_DIR -name coverage.dat)
    - genhtml -s --num-spaces 4 --legend --highlight --sort -t "Motion Planning Code Coverage" --demangle-cpp --function-coverage --branch-coverage -o coverage $COVERAGE_INFO
  coverage: /functions.*:\s(\d+.\d+%)/
  artifacts:
    paths:
      - coverage/
    name: code-coverage
    when: on_success
    expire_in: 1 day

pages:
  stage: deploy
  dependencies:
    - code-coverage
    - cppcheck
  script:
    - mkdir -p reports
    - echo "<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>Motion Planning</title> </head> <body> <ul> <li><a href="coverage/">Code Coverage Report</a></li> <li><a href="static_code_analysis_report/">Static Code Analysis Report</a></li> </ul> </body> </html>" > reports/index.html
    - mv coverage reports/coverage
    - mv static_code_analysis_report/ reports/static_code_analysis_report/
    - mv reports/ public
  artifacts:
    paths:
      - public
  only:
    refs:
      - master

package:
  stage: deploy
  script:
    - bazel build //:motion_planning_deb_pkg --host_force_python=PY2
    - mkdir -p artifacts
    - cp bazel-bin/*_amd64.deb artifacts/
  artifacts:
    paths:
      - artifacts/
    when: on_success
    expire_in: 7 days
  only:
    refs:
      - master

code_quality:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
      --env SOURCE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
