image: registry.gitlab.com/jinay1991/motion_planning

bazel-build:
  stage: build
  script:
    - bazel build //...

bazel-test:
  stage: test
  dependencies:
    - bazel-build
  script:
    - bazel test //... --test_output=all --cache_test_results=false --test_arg="--gtest_output=xml:/tmp/test_results.xml"
  after_script:
    - cp /tmp/test_results.xml test_results.xml
  artifacts:
    reports:
      junit: test_results.xml
    name: TestResults
    when: on_success

code-coverage:
  stage: test
  script:
    - bazel test //... --test_output=all --cache_test_results=false --collect_code_coverage=true
    - export OUTPUT_DIR=$(bazel info execution_root)
    - export COVERAGE_INFO=$(find $OUTPUT_DIR -name coverage.dat)
    - genhtml -s --num-spaces 4 --legend --highlight --sort -t "Test Coverage" --demangle-cpp --function-coverage --branch-coverage -o coverage $COVERAGE_INFO
  coverage: /functions.*:\s(\d+.\d+%)/
  artifacts:
    paths:
      - coverage/
    name: code-coverage
    when: on_success
    expire_in: 1 day

pages:
  stage: deploy
  dependencies:
    - code-coverage
  script:
    - mv coverage/ public
  artifacts:
    paths:
      - public
    expire_in: 30 days

code_quality:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
      --env SOURCE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
